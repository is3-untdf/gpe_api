# Prueba de variable de entorno
#quarkus.variable.entorno.externa=${NOMBRE_VARIABLE}

# Loggeo
quarkus.log.category."untdf.is3".level=DEBUG

# Definir timezone ya que no lo persistimos en DB pero podemos formatear la fecha (al escribir)
quarkus.hibernate-orm.jdbc.timezone=America/Argentina/Ushuaia
# Al leerlo lo normalizamos a la zona horaria de la propiedad (al mapear, leer)
quarkus.hibernate-orm.mapping.timezone.default-storage=normalize

# Persistir loggeo en archivo
quarkus.log.file.enable=true
quarkus.log.file.path=logs/${quarkus.application.name}
#quarkus.log.file.format=%d{yyyy-MM-dd HH:mm:ss,SSS\ %h %N[%i] %-5p [%c{3.\}] (%t) %s%e%n}
quarkus.log.file.rotation.file-suffix=.yyyyMMdd
quarkus.log.file.rotation.rotate-on-boot=true

#cors
quarkus.http.cors=true
quarkus.http.cors.origins=*

# Seleccionamos otro puerto que no sea el por defecto
quarkus.http.port=6550

# Solo necesario si hay mï¿½s BD conectadas
quarkus.datasource.db-kind=postgresql

# Container (3700:5432 --> postgresql 13.14-alpine)
quarkus.datasource.username=${USERNAME_DB}
quarkus.datasource.password=${PASSWORD_DB}
quarkus.datasource.jdbc.url=${JDBC_URL}
# Local
quarkus.datasource.jdbc.max-size=16
# hibernate
quarkus.hibernate-orm.database.generation=none
#quarkus.hibernate-orm.log.sql=true

# Remover el banner de Quarkus
quarkus.banner.enabled=false

# Directorio donde se guardan temporalmente los CSVs
file.system.directorio=/tmp/

# keycloak OIDC
#realm=${REALM}
#quarkus.oidc.auth-server-url=${OIDC_AUTH_SERVER_URL}
#quarkus.oidc.client-id=${OIDC_CLIENT_ID}
#quarkus.oidc.credentials.secret=${OIDC_SECRET}
# Si esta variable booleana se pone en el .env, no se pasa el token a swagger ui
#quarkus.oidc.authentication.user-info-required=true


# Cuenta de servicio del Cliente OIDC
#quarkus.oidc-client.auth-server-url=${OIDC_AUTH_SERVER_URL}
#quarkus.oidc-client.client-id=${quarkus.oidc.client-id}
#quarkus.oidc-client.credentials.secret=${quarkus.oidc.credentials.secret}
#quarkus.oidc-client.grant.type=client

# APIs EXTERNAS
#quarkus.rest-client.api-github-content.url=https://raw.githubusercontent.com/

# Si consumo como rest Client la API-rest de admin de quarkus que hice, debo pasarle un token
#quarkus.rest-client.api-keycloak.url=${REST_CLIENT_API_ADMIN_KEYCLOAK_URL}

# Para visualizar logs de la api consumida
#quarkus.rest-client.logging.scope=request-response
#quarkus.rest-client.logging.body-limit=500
#quarkus.log.category."org.jboss.resteasy.reactive.client.logging".level=DEBUG